range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc <- read_csv("./data/fsc.csv") %>%
mutate(july = ifelse(month_of_implementation == "July 2022",
"july", "jan_to_jun"))
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development, activity_red) %>%
mutate(hd = ifelse(humanitarian_or_development == "Humanitarian" |
activity_red == "food distribution",
"Humanitarian",
"Development")) %>%
mutate(humanitarian_or_development =
ifelse(activity_red == "multi-purpose cash transfer" &
humanitarian_or_development == "Development",
"Humanitarian", humanitarian_or_development)
) %>%
group_by(hd) %>%
summarise_at("beneficiaries", sum) %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
fsc %>%
filter(activity_red == "food_distribution") %>%
fsc %>%
filter(activity_red == "food_distribution")
fsc %>%
filter(activity_red == "food_distribution")
fsc %>%
filter(activity_red == "food distribution")
fsc %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd))
fsc %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies)
fsc %>% count(beneficiary_type)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
1, 0)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(quarter, is_idp) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(quarter, is_idp) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
fsc %>% count(beneficiary_type)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>% count(activity_red)
fsc %>% count(activity_red, strat_obj)
fsc %>% count(activity_red, strat_obj)
fsc %>% group_by(strat_obj, activity_red) %>%
summarise(total_value_usd = sum(total_value_usd, na.rm = TRUE))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(strat_obj == "so_3") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>% group_by(strat_obj, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(strat_obj == "so_3") %>%
group_by(beneficiary_type) %>%
summarise(frequencies = sum(beneficiaries))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(strat_obj == "so_3") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_mmk)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_mmk = sum(total_value_mmk)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_mmk)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_mmk = sum(total_value_mmk)) %>%
mutate(unit_cost = total_value_mmk / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(strat_obj == "so_3") %>%
filter(!is.na(total_value_mmk)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_mmk = sum(total_value_mmk)) %>%
mutate(unit_cost = total_value_mmk / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
library(flextable)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
round(filter(fsc, humanitarian_or_development == "Humanitarian" & july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} / filter(fsc, july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} * 100, digits = 2)`
round(filter(fsc, humanitarian_or_development == "Humanitarian" & july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} / filter(fsc, july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} * 100, digits = 2)`
round(filter(fsc, humanitarian_or_development == "Humanitarian" & july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} / filter(fsc, july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} * 100, digits = 2)
round(filter(fsc, humanitarian_or_development == "Humanitarian" & july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} / filter(fsc, july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} * 100, digits = 2)
fsc <- read_csv("./data/fsc.csv") %>%
mutate(july = ifelse(month_of_implementation == "July 2022",
"july", "jan_to_jun"))
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development, activity_red) %>%
mutate(hd = ifelse(humanitarian_or_development == "Humanitarian" |
activity_red == "food distribution",
"Humanitarian",
"Development")) %>%
mutate(humanitarian_or_development =
ifelse(activity_red == "multi-purpose cash transfer" &
humanitarian_or_development == "Development",
"Humanitarian", humanitarian_or_development)
) %>%
group_by(hd) %>%
summarise_at("beneficiaries", sum) %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
round(filter(fsc, humanitarian_or_development == "Humanitarian" & july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} / filter(fsc, july == "july") %>% {sum(.$new_beneficiaries, na.rm = TRUE)} * 100, digits = 2)
tinytex::install_tinytex()
gc()
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
library(flextable)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc %>%
filter(activity_red %in% c("crop, vegetable and seed kits",
"FFS and farmer training",
"IGA and small grants",
"livestock kits")) %>%
group_by(activity_red, july) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(names_from = july,
values_from = beneficiaries,
values_fill = 0) %>%
ungroup() %>%
mutate(total = jan_to_jun + july) %>%
mutate(`%_total` = round(total / sum(total) * 100,
digits = 2)) %>%
arrange(desc(total)) %>%
adorn_totals("row") %>%
rename(activity = activity_red) %>%
flextable() %>%
set_caption("Beneficiaries reached by agricultural and livelihood activities") %>%
theme_zebra() %>%
footnote(part = "header",
i = 1, j = 4,
value = as_paragraph(("as of 31 July 2022"))) %>%
fit_to_width(max_width = 4)
fsc <- read_csv("./data/fsc.csv") %>%
mutate(july = ifelse(month_of_implementation == "July 2022",
"july", "jan_to_jun"))
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development, activity_red) %>%
mutate(hd = ifelse(humanitarian_or_development == "Humanitarian" |
activity_red == "food distribution",
"Humanitarian",
"Development")) %>%
mutate(humanitarian_or_development =
ifelse(activity_red == "multi-purpose cash transfer" &
humanitarian_or_development == "Development",
"Humanitarian", humanitarian_or_development)
) %>%
group_by(hd) %>%
summarise_at("beneficiaries", sum) %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
fsc %>%
filter(activity_red %in% c("crop, vegetable and seed kits",
"FFS and farmer training",
"IGA and small grants",
"livestock kits")) %>%
group_by(activity_red, july) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(names_from = july,
values_from = beneficiaries,
values_fill = 0) %>%
ungroup() %>%
mutate(total = jan_to_jun + july) %>%
mutate(`%_total` = round(total / sum(total) * 100,
digits = 2)) %>%
arrange(desc(total)) %>%
adorn_totals("row") %>%
rename(activity = activity_red) %>%
flextable() %>%
set_caption("Beneficiaries reached by agricultural and livelihood activities") %>%
theme_zebra() %>%
footnote(part = "header",
i = 1, j = 4,
value = as_paragraph(("as of 31 July 2022"))) %>%
fit_to_width(max_width = 4)
fsc %>%
filter(activity_red %in% c("crop, vegetable and seed kits",
"FFS and farmer training",
"IGA and small grants",
"livestock kits")) %>%
group_by(activity_red, july) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(names_from = july,
values_from = beneficiaries,
values_fill = 0) %>%
ungroup() %>%
mutate(total = jan_to_jun + july) %>%
mutate(`%_total` = round(total / sum(total) * 100,
digits = 2)) %>%
arrange(desc(total)) %>%
adorn_totals("row") %>%
rename(activity = activity_red) %>%
flextable() %>%
set_caption("Beneficiaries reached by agricultural and livelihood activities") %>%
theme_zebra() %>%
footnote(part = "header",
i = 1, j = 4,
value = as_paragraph(("as of 31 July 2022"))) %>%
fit_to_width()
fsc %>%
filter(activity_red %in% c("crop, vegetable and seed kits",
"FFS and farmer training",
"IGA and small grants",
"livestock kits")) %>%
group_by(activity_red, july) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(names_from = july,
values_from = beneficiaries,
values_fill = 0) %>%
ungroup() %>%
mutate(total = jan_to_jun + july) %>%
mutate(`%_total` = round(total / sum(total) * 100,
digits = 2)) %>%
arrange(desc(total)) %>%
adorn_totals("row") %>%
rename(activity = activity_red) %>%
flextable() %>%
set_caption("Beneficiaries reached by agricultural and livelihood activities") %>%
theme_zebra() %>%
footnote(part = "header",
i = 1, j = 4,
value = as_paragraph(("as of 31 July 2022"))) %>%
set_table_properties(width = .9)
fsc %>%
filter(activity_red %in% c("crop, vegetable and seed kits",
"FFS and farmer training",
"IGA and small grants",
"livestock kits")) %>%
group_by(activity_red, july) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
pivot_wider(names_from = july,
values_from = beneficiaries,
values_fill = 0) %>%
ungroup() %>%
mutate(total = jan_to_jun + july) %>%
mutate(`%_total` = round(total / sum(total) * 100,
digits = 2)) %>%
arrange(desc(total)) %>%
adorn_totals("row") %>%
rename(activity = activity_red) %>%
flextable() %>%
set_caption("Beneficiaries reached by agricultural and livelihood activities") %>%
theme_zebra() %>%
footnote(part = "header",
i = 1, j = 4,
value = as_paragraph(("as of 31 July 2022"))) %>%
set_table_properties(width = .9, layout = "autofit")
