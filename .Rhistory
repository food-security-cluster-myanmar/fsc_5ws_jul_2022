flextable() %>%
set_caption("Percentage of benficiaries reached by activity and delivery modality") %>%
theme_zebra() %>%
set_table_properties(layout = "autofit") %>%
footnote(part = "header",
i = 1, j = 6,
value = as_paragraph("as of 31 July 2022"))
fsc %>%
mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid",
str_detect(delivery_modality, "Service") ~ "Service delivery",
TRUE ~ delivery_modality)) %>%
filter(!is.na(delivery_modality) & !is.na(location_type)) %>%
sum_ben2(delivery_modality, location_type) %>%
ggplot(aes(x = delivery_modality, y = beneficiaries, fill = delivery_modality)) +
geom_col() +
scale_y_continuous(labels = comma) +
facet_wrap(~location_type, scales = "free") +
theme(axis.text.x = element_text(angle = 25, vjust = .7, hjust = .5),
legend.position = "none",
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121")) +
labs(x = "Delivery modality", y = "Beneficiaries",
title = "Delivery modalities by location type")
fsc %>%
filter(!is.na(delivery_modality)) %>%
mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid",
str_detect(delivery_modality, "Service") ~ "Service delivery",
TRUE ~ delivery_modality)) %>%
group_by(state, delivery_modality) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
group_by(state) %>%
mutate(pc = beneficiaries / sum(beneficiaries),
state = fct_reorder(state, beneficiaries)) %>%
ggplot(aes(x = pc, y = fct_rev(state), fill = delivery_modality)) +
geom_col() +
scale_x_continuous(labels = percent, breaks = seq(0, 1, by = .2)) +
geom_text(aes(y = state, x = pc + 0.125, label = comma(total, accuracy = 1), fill = NULL),
data = state_totals, hjust = "inward", size = 2.5) +
labs(x = "% of total", y = "", fill = "",
title = "Percentage of beneficiaries reached by delivery modalities",
subtitle = "Beneficiaries as of 30 June 2022 at the end of each bar")
state_totals <- fsc %>%
filter(!is.na(delivery_modality)) %>%
group_by(state) %>%
summarise(total = sum(new_beneficiaries)) %>%
mutate(pc = 1,
state = fct_reorder(state, total))
fsc %>%
filter(!is.na(delivery_modality)) %>%
mutate(delivery_modality = case_when(str_detect(delivery_modality, "Hybrid") ~ "Hybrid",
str_detect(delivery_modality, "Service") ~ "Service delivery",
TRUE ~ delivery_modality)) %>%
group_by(state, delivery_modality) %>%
summarise(beneficiaries = sum(beneficiaries)) %>%
group_by(state) %>%
mutate(pc = beneficiaries / sum(beneficiaries),
state = fct_reorder(state, beneficiaries)) %>%
ggplot(aes(x = pc, y = fct_rev(state), fill = delivery_modality)) +
geom_col() +
scale_x_continuous(labels = percent, breaks = seq(0, 1, by = .2)) +
geom_text(aes(y = state, x = pc + 0.125, label = comma(total, accuracy = 1), fill = NULL),
data = state_totals, hjust = "inward", size = 2.5) +
labs(x = "% of total", y = "", fill = "",
title = "Percentage of beneficiaries reached by delivery modalities",
subtitle = "Beneficiaries as of 30 June 2022 at the end of each bar")
fsc %>%
filter(!is.na(mmk_per_hhd) & !is.na(new_beneficiaries)) %>%
filter(delivery_modality %in% c("CBT/CVA", "Hybrid (In-kind & CBT/CVA)")) %>%
group_by(mmk_hhd_bin, july) %>%
summarise(households = sum(households)) %>%
group_by(july) %>%
mutate(`%_of_hhd` = round(households / sum(households) * 100, digits = 2)) %>%
ungroup() %>%
filter(july == "july") %>%
mutate(mmk_hhd_bin = fct_relevel(mmk_hhd_bin,
c("<10K",
"10K_<30K",
"30K_<100K",
"100K_<200K",
"200K_<300K",
"300K_<1M",
">=1M"))) %>%
ggplot(aes(x = mmk_hhd_bin, y = households, fill = mmk_hhd_bin)) +
geom_col() +
geom_text(aes(label = `%_of_hhd`), vjust = -0.4, size = 3) +
scale_fill_viridis_d(option = "mako", direction = -1) +
scale_y_continuous(labels = comma, breaks = seq(0, 80000, by = 10000)) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 60, hjust = 0.8, vjust = 0.9),
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121")) +
labs(x = "MMK value of cash transfer per household",
y = "Number of households",
title = "Number of households by value of cash transfer per household (July 2022)",
subtitle = "Figures at the top of each bar show percentage of households\nOnly households reached through the cash, hybrid or voucher modalities are included")
fsc %>% filter(!is.na(total_value_mmk) &
activity_red %out% c("FFS and farmer training", "vocational training")) %>%
mutate(activity_red = fct_rev(fct_relevel(activity_red,
c("food distribution",
"crop, vegentable and seed kits",
"multi-purpose cash transfer",
"food_cash for work_assets",
"IGA and small grants")))) %>%
arrange(activity_red) %>%
ggplot(aes(y = activity_red,
x = mmk_per_person,
colour = activity_red)) +
geom_jitter(alpha = .1,
aes(size = beneficiaries)) +
geom_boxplot(alpha = .8,
outlier.alpha = .2) +
scale_x_continuous(trans = "log10",
breaks = c(10000, 30000, 100000,
300000, 1000000),
labels = comma) +
theme(legend.position = "none",
axis.text.x = element_text(angle = 60, hjust = .5, vjust = .5)) +
labs(x = "MMK per person", y = "",
title = "Boxplots of USD transfer values per person in 2022, as of July 2022",
subtitle = "Thick line in each box is the average;\n Points are individual interventions, sizes indicate number of beneficiaries")
fsc %>%
filter(july == "july") %>%
group_by(activity_red, mmk_hhd_bin) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(pc = beneficiaries / sum(beneficiaries)) %>%
filter(activity_red != "microfinance activities") %>%
mutate(mmk_hhd_bin = fct_relevel(mmk_hhd_bin,
c("<10K",
"10K_<30K",
"30K_<100K",
"100K_<200K",
"200K_<300K",
"300K_<1M",
">=1M"))) %>%
arrange(mmk_hhd_bin) %>%
ggplot(aes(x = pc, y = activity_red,
fill = mmk_hhd_bin)) +
geom_col() +
scale_x_continuous(labels = percent, breaks = seq(0, 1, by = .2)) +
scale_fill_viridis_d(option = "mako", direction = -1,
na.value = "grey50") +
geom_text(aes(y = activity_red,
x = pc + .125,
label = comma(total, accuracy = 1), fill = NULL),
data = activity_totals, hjust = "inward", size = 3.5) +
labs(x = "% of activity total",
y = "",
fill = "",
title = "Percentage of cash beneficiaries by activity, July 2022",
subtitle = "Beneficiaries reached in July 2022 at the end of each bar\nGrey/NA shows beneficiaries of non-cash interventions")
activity_totals <- fsc %>%
filter(july == "july") %>%
group_by(activity_red) %>%
summarise(total = sum(new_beneficiaries)) %>%
filter(activity_red != "microfinance activities") %>%
mutate(pc = 1,
activity_red = fct_reorder(activity_red, total))
fsc %>%
filter(july == "july") %>%
group_by(activity_red, mmk_hhd_bin) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(pc = beneficiaries / sum(beneficiaries)) %>%
filter(activity_red != "microfinance activities") %>%
mutate(mmk_hhd_bin = fct_relevel(mmk_hhd_bin,
c("<10K",
"10K_<30K",
"30K_<100K",
"100K_<200K",
"200K_<300K",
"300K_<1M",
">=1M"))) %>%
arrange(mmk_hhd_bin) %>%
ggplot(aes(x = pc, y = activity_red,
fill = mmk_hhd_bin)) +
geom_col() +
scale_x_continuous(labels = percent, breaks = seq(0, 1, by = .2)) +
scale_fill_viridis_d(option = "mako", direction = -1,
na.value = "grey50") +
geom_text(aes(y = activity_red,
x = pc + .125,
label = comma(total, accuracy = 1), fill = NULL),
data = activity_totals, hjust = "inward", size = 3.5) +
labs(x = "% of activity total",
y = "",
fill = "",
title = "Percentage of cash beneficiaries by activity, July 2022",
subtitle = "Beneficiaries reached in July 2022 at the end of each bar\nGrey/NA shows beneficiaries of non-cash interventions")
fsc %>%
filter(july == "july") %>%
group_by(activity_red, mmk_hhd_bin) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
mutate(pc = beneficiaries / sum(beneficiaries)) %>%
filter(activity_red != "microfinance activities") %>%
mutate(mmk_hhd_bin = fct_relevel(mmk_hhd_bin,
c("<10K",
"10K_<30K",
"30K_<100K",
"100K_<200K",
"200K_<300K",
"300K_<1M",
">=1M"))) %>%
arrange(mmk_hhd_bin) %>%
ggplot(aes(x = pc, y = activity_red,
fill = fct_relevel(mmk_hhd_bin,
c("<10K",
"10K_<30K",
"30K_<100K",
"100K_<200K",
"200K_<300K",
"300K_<1M",
">=1M")))) +
geom_col() +
scale_x_continuous(labels = percent, breaks = seq(0, 1, by = .2)) +
scale_fill_viridis_d(option = "mako", direction = -1,
na.value = "grey50") +
geom_text(aes(y = activity_red,
x = pc + .125,
label = comma(total, accuracy = 1), fill = NULL),
data = activity_totals, hjust = "inward", size = 3.5) +
labs(x = "% of activity total",
y = "",
fill = "",
title = "Percentage of cash beneficiaries by activity, July 2022",
subtitle = "Beneficiaries reached in July 2022 at the end of each bar\nGrey/NA shows beneficiaries of non-cash interventions")
fsc %>%
group_by(date) %>%
summarise(implementing = n_distinct(implementing_partner),
reporting = n_distinct(reporting_organization)) %>%
pivot_longer(cols = c(implementing, reporting),
names_to = "partner",
values_to = "count") %>%
ggplot(aes(x = date, y = count,
colour = partner)) +
geom_point(size = 2.5) +
geom_line(size = 1.5) +
geom_text(aes(label = count),
colour = "black",
vjust = -.3) +
scale_x_date(date_labels = "%b-%y",
date_breaks = "1 month") +
scale_colour_manual(values = c("#F39C12", "#0E6655")) +
labs(x = "", y = "Number of partners",
colour = "Parnter\ntype",
title = "Number of partners reporting by month, 31 July 2022")
fsc %>%
filter(july == "yes") %>%
group_by(beneficiary_type) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
select(beneficiary_type, beneficiaries) %>%
ggplot(aes(x = beneficiaries,
y = fct_reorder(beneficiary_type, beneficiaries),
fill = beneficiary_type,
group = beneficiary_type)) +
geom_col() +
geom_text(aes(label = comma(beneficiaries)),
hjust = "inward") +
scale_x_continuous(labels = comma) +
labs(y = "", x = "Beneficiaries",
title = "Beneficaries reached by beneficiary type") +
theme(legend.position = "none")
fsc %>%
filter(july == "july") %>%
group_by(beneficiary_type) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
select(beneficiary_type, beneficiaries) %>%
ggplot(aes(x = beneficiaries,
y = fct_reorder(beneficiary_type, beneficiaries),
fill = beneficiary_type,
group = beneficiary_type)) +
geom_col() +
geom_text(aes(label = comma(beneficiaries)),
hjust = "inward") +
scale_x_continuous(labels = comma) +
labs(y = "", x = "Beneficiaries",
title = "Beneficaries reached by beneficiary type") +
theme(legend.position = "none")
fsc %>% distinct(admin3_pcode) %>% nrow()
330 - (fsc %>% distinct(admin3_pcode) %>% nrow())
ben_target <- fsc %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(implementing_partner)) %>%
left_join(pin, by = c("admin3_pcode")) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
fs_targeted = ifelse(fs_targeted == 0 & beneficiaries > 0, 1, fs_targeted),
fs_targeted = round(fs_targeted, digits = 0)) %>%
arrange(desc(reached_pc)) %>%
left_join(fsc %>%
filter(july == "july") %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(
beneficiaries = sum(new_bexneficiaries),
partners = n_distinct(implementing_partner)
) %>%
mutate(july = 1) %>%
select(july, admin3_pcode), by = "admin3_pcode") %>%
mutate(july = ifelse(july == 1, "july", "jan_to_jun")) %>%
replace_na(list(july = "jan_to_jun")) %>%
select(state, township,
fs_pin, fs_targeted,
beneficiaries, reached_pc,
partners,
july) %>%
ggplot(aes(x = fs_targeted, y = beneficiaries, colour = july,
text = paste0(township, ",", "\n",
state, ",", "\n",
"beneficiaries: ", comma(beneficiaries, accuracy = 1), "\n",
"target: ", comma(fs_targeted, accuracy = 1), "\n",
"% of target: ", percent(reached_pc, accuracy = 2), "\n",
"partners: ", partners))) +
geom_abline(intercept = 0, slope = 1, lty = 2, colour = "red") +
geom_abline(intercept = .5, slope = 1, lty = 2, colour = "grey", size = .4) +
geom_abline(intercept = -.5, slope = 1, lty = 2, colour = "grey", size = .4) +
geom_point(aes(size = beneficiaries), alpha = 0.8) +
scale_size_continuous(guide = "none") +
scale_x_continuous(trans = "log10", labels = comma) +
scale_y_continuous(trans = "log10", labels = comma) +
scale_colour_manual(values = c("#AF7AC5",
"#F1C40F")) +
labs(x = "Targeted population", y = "Beneficiaries",
title = "Beneficiaries reached vs targeted population by township, as 31 July 2022",
subtitle = "The red line is 100% of target",
colour = "") +
theme(legend.title = element_text(size = 7))
ben_target <- fsc %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(implementing_partner)) %>%
left_join(pin, by = c("admin3_pcode")) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
fs_targeted = ifelse(fs_targeted == 0 & beneficiaries > 0, 1, fs_targeted),
fs_targeted = round(fs_targeted, digits = 0)) %>%
arrange(desc(reached_pc)) %>%
left_join(fsc %>%
filter(july == "july") %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(
beneficiaries = sum(new_beneficiaries),
partners = n_distinct(implementing_partner)
) %>%
mutate(july = 1) %>%
select(july, admin3_pcode), by = "admin3_pcode") %>%
mutate(july = ifelse(july == 1, "july", "jan_to_jun")) %>%
replace_na(list(july = "jan_to_jun")) %>%
select(state, township,
fs_pin, fs_targeted,
beneficiaries, reached_pc,
partners,
july) %>%
ggplot(aes(x = fs_targeted, y = beneficiaries, colour = july,
text = paste0(township, ",", "\n",
state, ",", "\n",
"beneficiaries: ", comma(beneficiaries, accuracy = 1), "\n",
"target: ", comma(fs_targeted, accuracy = 1), "\n",
"% of target: ", percent(reached_pc, accuracy = 2), "\n",
"partners: ", partners))) +
geom_abline(intercept = 0, slope = 1, lty = 2, colour = "red") +
geom_abline(intercept = .5, slope = 1, lty = 2, colour = "grey", size = .4) +
geom_abline(intercept = -.5, slope = 1, lty = 2, colour = "grey", size = .4) +
geom_point(aes(size = beneficiaries), alpha = 0.8) +
scale_size_continuous(guide = "none") +
scale_x_continuous(trans = "log10", labels = comma) +
scale_y_continuous(trans = "log10", labels = comma) +
scale_colour_manual(values = c("#AF7AC5",
"#F1C40F")) +
labs(x = "Targeted population", y = "Beneficiaries",
title = "Beneficiaries reached vs targeted population by township, as 31 July 2022",
subtitle = "The red line is 100% of target",
colour = "") +
theme(legend.title = element_text(size = 7))
ggplotly(ben_target, tooltip = c("text"), width = 820, height = 500) %>%
config(displayModeBar = FALSE) %>%
layout(title = list(text =
paste0(
"Beneficiaries vs target by township, as 31 July 2022",
"<br>",
"<sup>",
"The red line is 100% of target; size indicates number of beneficiaries; yellow townships were reached in July",
"</sup>"
)),
legend = list(font = list(size = 7)))
fsc %>%
group_by(state, township) %>%
summarise(beneficiaries = sum(new_beneficiaries), .groups = "drop") %>%
mutate(pc = beneficiaries / sum(beneficiaries)) %>%
arrange(desc(pc))
fsc %>%
group_by(state, township) %>%
summarise(beneficiaries = sum(new_beneficiaries), .groups = "drop") %>%
mutate(pc = beneficiaries / sum(beneficiaries)) %>%
arrange(desc(pc)) %>%
filter(beneficiaries > 120000) %>%
{sum(.$pc)}
fsc %>% count(state, township, location)
384 + 34 + 3
fsc %>% count(state, township, location) %>% nrow()
fsc %>% count(state, township, location) %>% nrow() %>% format(big.mark = ",")
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
library(flextable)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
money_scatter <- fsc %>%
filter(!is.na(total_value_mmk) &
activity_red %out% c("livestock kits",
"vocational training",
"FFS and farmer training")) %>%
group_by(state, township, location,
implementing_partner,
activity_red) %>%
summarise(beneficiaries = sum(beneficiaries),
total_value = sum(total_value_mmk),
rounds = n_distinct(date),
.groups = "drop") %>%
mutate(per_person = round(total_value / beneficiaries, digits = 2)) %>%
filter(total_value > 0) %>%
ggplot(aes(x = beneficiaries,
y = per_person,
colour = activity_red,
text = paste0(implementing_partner, "\n",
activity_red, "\n",
"ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
"MMK per person: ", comma(per_person, accuracy = 1), "\n",
"total MMK: ", comma(total_value, accuracy = 1), "\n",
"rounds: ", rounds, "\n",
township, ", ", state))) +
geom_jitter(aes(size = total_value), alpha = .5) +
scale_y_continuous(trans = "log10",
breaks = c(0, 1, 3, 10, 30, 100, 300),
labels = dollar_format(accuracy = 1)) +
scale_x_continuous(trans = "log10",
labels = comma,
breaks = c(0, 10, 100, 1000, 10000, 100000, 300000)) +
scale_size_continuous(guide = "none", range = c(0.3, 5)) +
labs(x = "Beneficiary frequencies",
y = "MMK value per person",
title = "Average MMK transfer value per person in 2022\nBy organisation, location and activity",
subtitle = "By organisation, location and activity",
colour = "by org, location and activity\ndouble-click to select") +
theme(legend.text = element_text(size = 5),
legend.title = element_text(size = 5),
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121")) +
guides(colour = guide_legend(override.aes = list(size = 1, alpha = 1)))
ggplotly(money_scatter, tooltip = c("text"), width = 820) %>%
config(displayModeBar = FALSE) %>%
layout(title = list(text = paste0("Average MMK transfer value per person, as of 31 July 2022")))
