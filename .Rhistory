group = beneficiary_type)) +
geom_col() +
geom_text(aes(label = comma(beneficiaries)),
hjust = "inward") +
scale_x_continuous(labels = comma) +
labs(y = "", x = "Beneficiaries",
title = "Beneficaries reached by beneficiary type") +
theme(legend.position = "none")
fsc %>%
filter(july == "july") %>%
group_by(beneficiary_type) %>%
summarise(beneficiaries = sum(new_beneficiaries)) %>%
select(beneficiary_type, beneficiaries) %>%
ggplot(aes(x = beneficiaries,
y = fct_reorder(beneficiary_type, beneficiaries),
fill = beneficiary_type,
group = beneficiary_type)) +
geom_col() +
geom_text(aes(label = comma(beneficiaries)),
hjust = "inward") +
scale_x_continuous(labels = comma) +
labs(y = "", x = "Beneficiaries",
title = "Beneficaries reached by beneficiary type") +
theme(legend.position = "none")
fsc %>% distinct(admin3_pcode) %>% nrow()
330 - (fsc %>% distinct(admin3_pcode) %>% nrow())
ben_target <- fsc %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(implementing_partner)) %>%
left_join(pin, by = c("admin3_pcode")) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
fs_targeted = ifelse(fs_targeted == 0 & beneficiaries > 0, 1, fs_targeted),
fs_targeted = round(fs_targeted, digits = 0)) %>%
arrange(desc(reached_pc)) %>%
left_join(fsc %>%
filter(july == "july") %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(
beneficiaries = sum(new_bexneficiaries),
partners = n_distinct(implementing_partner)
) %>%
mutate(july = 1) %>%
select(july, admin3_pcode), by = "admin3_pcode") %>%
mutate(july = ifelse(july == 1, "july", "jan_to_jun")) %>%
replace_na(list(july = "jan_to_jun")) %>%
select(state, township,
fs_pin, fs_targeted,
beneficiaries, reached_pc,
partners,
july) %>%
ggplot(aes(x = fs_targeted, y = beneficiaries, colour = july,
text = paste0(township, ",", "\n",
state, ",", "\n",
"beneficiaries: ", comma(beneficiaries, accuracy = 1), "\n",
"target: ", comma(fs_targeted, accuracy = 1), "\n",
"% of target: ", percent(reached_pc, accuracy = 2), "\n",
"partners: ", partners))) +
geom_abline(intercept = 0, slope = 1, lty = 2, colour = "red") +
geom_abline(intercept = .5, slope = 1, lty = 2, colour = "grey", size = .4) +
geom_abline(intercept = -.5, slope = 1, lty = 2, colour = "grey", size = .4) +
geom_point(aes(size = beneficiaries), alpha = 0.8) +
scale_size_continuous(guide = "none") +
scale_x_continuous(trans = "log10", labels = comma) +
scale_y_continuous(trans = "log10", labels = comma) +
scale_colour_manual(values = c("#AF7AC5",
"#F1C40F")) +
labs(x = "Targeted population", y = "Beneficiaries",
title = "Beneficiaries reached vs targeted population by township, as 31 July 2022",
subtitle = "The red line is 100% of target",
colour = "") +
theme(legend.title = element_text(size = 7))
ben_target <- fsc %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(beneficiaries = sum(new_beneficiaries),
partners = n_distinct(implementing_partner)) %>%
left_join(pin, by = c("admin3_pcode")) %>%
mutate(reached_pc = beneficiaries / fs_targeted,
reached_pc = ifelse(is.infinite(reached_pc), 1, reached_pc),
fs_targeted = ifelse(fs_targeted == 0 & beneficiaries > 0, 1, fs_targeted),
fs_targeted = round(fs_targeted, digits = 0)) %>%
arrange(desc(reached_pc)) %>%
left_join(fsc %>%
filter(july == "july") %>%
group_by(admin3_pcode = admin3_pcode_old) %>%
summarise(
beneficiaries = sum(new_beneficiaries),
partners = n_distinct(implementing_partner)
) %>%
mutate(july = 1) %>%
select(july, admin3_pcode), by = "admin3_pcode") %>%
mutate(july = ifelse(july == 1, "july", "jan_to_jun")) %>%
replace_na(list(july = "jan_to_jun")) %>%
select(state, township,
fs_pin, fs_targeted,
beneficiaries, reached_pc,
partners,
july) %>%
ggplot(aes(x = fs_targeted, y = beneficiaries, colour = july,
text = paste0(township, ",", "\n",
state, ",", "\n",
"beneficiaries: ", comma(beneficiaries, accuracy = 1), "\n",
"target: ", comma(fs_targeted, accuracy = 1), "\n",
"% of target: ", percent(reached_pc, accuracy = 2), "\n",
"partners: ", partners))) +
geom_abline(intercept = 0, slope = 1, lty = 2, colour = "red") +
geom_abline(intercept = .5, slope = 1, lty = 2, colour = "grey", size = .4) +
geom_abline(intercept = -.5, slope = 1, lty = 2, colour = "grey", size = .4) +
geom_point(aes(size = beneficiaries), alpha = 0.8) +
scale_size_continuous(guide = "none") +
scale_x_continuous(trans = "log10", labels = comma) +
scale_y_continuous(trans = "log10", labels = comma) +
scale_colour_manual(values = c("#AF7AC5",
"#F1C40F")) +
labs(x = "Targeted population", y = "Beneficiaries",
title = "Beneficiaries reached vs targeted population by township, as 31 July 2022",
subtitle = "The red line is 100% of target",
colour = "") +
theme(legend.title = element_text(size = 7))
ggplotly(ben_target, tooltip = c("text"), width = 820, height = 500) %>%
config(displayModeBar = FALSE) %>%
layout(title = list(text =
paste0(
"Beneficiaries vs target by township, as 31 July 2022",
"<br>",
"<sup>",
"The red line is 100% of target; size indicates number of beneficiaries; yellow townships were reached in July",
"</sup>"
)),
legend = list(font = list(size = 7)))
fsc %>%
group_by(state, township) %>%
summarise(beneficiaries = sum(new_beneficiaries), .groups = "drop") %>%
mutate(pc = beneficiaries / sum(beneficiaries)) %>%
arrange(desc(pc))
fsc %>%
group_by(state, township) %>%
summarise(beneficiaries = sum(new_beneficiaries), .groups = "drop") %>%
mutate(pc = beneficiaries / sum(beneficiaries)) %>%
arrange(desc(pc)) %>%
filter(beneficiaries > 120000) %>%
{sum(.$pc)}
fsc %>% count(state, township, location)
384 + 34 + 3
fsc %>% count(state, township, location) %>% nrow()
fsc %>% count(state, township, location) %>% nrow() %>% format(big.mark = ",")
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
library(flextable)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
money_scatter <- fsc %>%
filter(!is.na(total_value_mmk) &
activity_red %out% c("livestock kits",
"vocational training",
"FFS and farmer training")) %>%
group_by(state, township, location,
implementing_partner,
activity_red) %>%
summarise(beneficiaries = sum(beneficiaries),
total_value = sum(total_value_mmk),
rounds = n_distinct(date),
.groups = "drop") %>%
mutate(per_person = round(total_value / beneficiaries, digits = 2)) %>%
filter(total_value > 0) %>%
ggplot(aes(x = beneficiaries,
y = per_person,
colour = activity_red,
text = paste0(implementing_partner, "\n",
activity_red, "\n",
"ben. frequencies: ", comma(beneficiaries, accuracy = 1), "\n",
"MMK per person: ", comma(per_person, accuracy = 1), "\n",
"total MMK: ", comma(total_value, accuracy = 1), "\n",
"rounds: ", rounds, "\n",
township, ", ", state))) +
geom_jitter(aes(size = total_value), alpha = .5) +
scale_y_continuous(trans = "log10",
breaks = c(0, 1, 3, 10, 30, 100, 300),
labels = dollar_format(accuracy = 1)) +
scale_x_continuous(trans = "log10",
labels = comma,
breaks = c(0, 10, 100, 1000, 10000, 100000, 300000)) +
scale_size_continuous(guide = "none", range = c(0.3, 5)) +
labs(x = "Beneficiary frequencies",
y = "MMK value per person",
title = "Average MMK transfer value per person in 2022\nBy organisation, location and activity",
subtitle = "By organisation, location and activity",
colour = "by org, location and activity\ndouble-click to select") +
theme(legend.text = element_text(size = 5),
legend.title = element_text(size = 5),
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "#212121")) +
guides(colour = guide_legend(override.aes = list(size = 1, alpha = 1)))
ggplotly(money_scatter, tooltip = c("text"), width = 820) %>%
config(displayModeBar = FALSE) %>%
layout(title = list(text = paste0("Average MMK transfer value per person, as of 31 July 2022")))
knitr::opts_chunk$set(echo = FALSE, fig.width=9, message = FALSE, warning=FALSE)
library(tidyverse)
library(readxl)
library(lubridate)
library(stringi)
library(pander)
library(janitor)
library(fuzzyjoin)
library(scales)
library(magrittr)
library(sf)
library(kableExtra)
library(viridis)
library(skimr)
library(plotly)
library(patchwork)
library(broom)
library(DT)
library(here)
library(tidytext)
library(ggforce)
library(flextable)
theme_set(theme_light())
# disabling scientific notation
options(scipen = 100)
# pander tables all in one row
panderOptions('table.split.table', Inf)
# pander thousands separator
panderOptions("big.mark", ",")
# replace
opts <- options(knitr.kable.NA = "")
`%out%` <- Negate(`%in%`)
# function for transposing df
transpose_df <- function(df) {
t_df <- data.table::transpose(df)
colnames(t_df) <- rownames(df)
rownames(t_df) <- colnames(df)
t_df <- t_df %>%
tibble::rownames_to_column(.data = .) %>%
tibble::as_tibble(.)
return(t_df)
}
# function beneficiary summaries
sum_ben <- function(df, column_var){
column_var <- enquo(column_var)
df %>%
group_by(!!column_var) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop") %>%
arrange(desc(beneficiaries))
}
# function beneficiary summaries, 2 grouped variables
sum_ben2 <- function(df, column_var1, column_var2){
column_var1 <- enquo(column_var1)
column_var2 <- enquo(column_var2)
df %>%
group_by(!!column_var1, !!column_var2) %>% # must add bang-bang
summarise(beneficiaries = sum(new_beneficiaries, na.rm = TRUE),
.groups = "drop")
}
# scaling functions
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
range_wna <- function(x){(x-min(x, na.rm = TRUE))/(max(x, na.rm = TRUE)-min(x, na.rm = TRUE))}
#mode function
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
fsc <- read_csv("./data/fsc.csv") %>%
mutate(july = ifelse(month_of_implementation == "July 2022",
"july", "jan_to_jun"))
fsc_2021 <- read_csv("./data/fsc_2021.csv")
pin <- read_csv("./data/fs_pin.csv")
hd_list <- fsc %>%
group_by(humanitarian_or_development, activity_red) %>%
mutate(hd = ifelse(humanitarian_or_development == "Humanitarian" |
activity_red == "food distribution",
"Humanitarian",
"Development")) %>%
mutate(humanitarian_or_development =
ifelse(activity_red == "multi-purpose cash transfer" &
humanitarian_or_development == "Development",
"Humanitarian", humanitarian_or_development)
) %>%
group_by(hd) %>%
summarise_at("beneficiaries", sum) %>%
mutate(pc = round(beneficiaries / sum(beneficiaries) * 100, digits = 2))
# shapefiles
pcode3_shape <- st_read("./mmr_polbnda_adm3_mimu_250k/mmr_polbnda_adm3_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE,
township = TS,
admin3_pcode = TS_PCODE) %>%
mutate(admin3_pcode = ifelse(str_detect(township, "Hlaingtharya"), "MMR013008", admin3_pcode))
pcode1_shape <- st_read("./mmr_polbnda2_adm1_mimu_250k/mmr_polbnda2_adm1_mimu_250k.shp", quiet = TRUE) %>%
rename(state = ST,
admin1_pcode = ST_PCODE) %>% st_as_sf()
fsc %>%
filter(activity_red == "food_distribution") %>%
fsc %>%
filter(activity_red == "food_distribution")
fsc %>%
filter(activity_red == "food_distribution")
fsc %>%
filter(activity_red == "food distribution")
fsc %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd))
fsc %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies)
fsc %>% count(beneficiary_type)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
1, 0)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(quarter, is_idp) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(quarter, is_idp) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
fsc %>% count(beneficiary_type)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost)
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>% count(activity_red)
fsc %>% count(activity_red, strat_obj)
fsc %>% count(activity_red, strat_obj)
fsc %>% group_by(strat_obj, activity_red) %>%
summarise(total_value_usd = sum(total_value_usd, na.rm = TRUE))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(strat_obj == "so_3") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>% group_by(strat_obj, activity_red) %>%
summarise(beneficiaries = sum(beneficiaries))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(strat_obj == "so_3") %>%
group_by(beneficiary_type) %>%
summarise(frequencies = sum(beneficiaries))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(strat_obj == "so_3") %>%
filter(!is.na(total_value_usd)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_usd = sum(total_value_usd)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_mmk)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_mmk = sum(total_value_mmk)) %>%
mutate(unit_cost = total_value_usd / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(activity_red == "food distribution") %>%
filter(!is.na(total_value_mmk)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_mmk = sum(total_value_mmk)) %>%
mutate(unit_cost = total_value_mmk / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
fsc %>%
mutate(is_idp = ifelse(beneficiary_type == "Internally Displaced",
TRUE, FALSE)) %>%
filter(strat_obj == "so_3") %>%
filter(!is.na(total_value_mmk)) %>%
group_by(is_idp, quarter) %>%
summarise(frequencies = sum(beneficiaries),
total_value_mmk = sum(total_value_mmk)) %>%
mutate(unit_cost = total_value_mmk / frequencies) %>%
# This is just to match the OCHA template
pivot_wider(names_from = quarter, values_from = unit_cost) %>%
arrange(desc(is_idp))
